This project was forked from the beepcore-java project originally hosted on 
sourceforge at: http://sourceforge.net/projects/beepcore-java/

This fork was created to support the JALoP java library implementation and is not 
generally maintained beyond what is required to support the JALoP project.

beepcore-java 0.9 release
---------------------

This release includes an implementation of beep core RFC 3080 and beep
mapping for TCP RFC 3081.

JDK Version notes
-----------------

beepcore-java supports Java 2 Standard Edition (J2SE) v1.2.x or
higher. The main reason for this is the use of the collections
classes.

Requirements
------------

The core package of the library is requires a XML parser that supports
the javax.xml.parsers, org.w3c.dom, and org.xml.sax interfaces. Xerces
is the library we use for most of our work but it has been tested with
others.

The profile TLS package requires the JSSE library.

The required third party library jar files are located under the 3rd-party
directory. A build.properties file is provided that points to the currently
used versions of the third party libraries:

The required keys are:
cl_apis_jar       # The path to the Apache Commons Logging APIS jar
cl_jar            # The path to the Apache Commons Logging jar
cl_adapters_jar   # The path to the Apache Commons Logging adapters jar
xerces_root    	  # The path to where you've extracted the xerces release
concurrent_jar	  # The path to J2SE Concurrent Programming jar 

Optional keys (not provided in 3rd party library):
junit_jar         # The path to the junit jar, only needed if you are running the tests

Source Package Locations:
-------------------------
The EDU.oswego.cs.dl.util.concurrent package, build 1.3.4 can be obtained 
from https://github.com/downloads/jalop-tresys/beepcore-java/concurrent.jar

Apache commons logging, available at http://commons.apache.org/logging/
At the time of writing, beepcore-java was working 1.1.1.

To run the tests, you will junit, available at http://www.junit.org/
At the time of writing, beepcore-java was working using junit 4.10.

Build:
------

To build the library we are using ANT (http://jakarta.apache.org/ant/)
with the build.xml file in the root of the tree. The build.xml file is
lacking all of the dependencies.

Modify the version line under beepcore in the build.properties file to have the desired target version for the beepcore release.
    name=beepcore
    Name=BEEP Core
    version=0.9.18

Build the library:
	ant clean 
	ant dist-tgz

Distribution is located under the build directory.

To use the new beepcore version with jjnl:
    # Move the distribution (beepcore-x.y.z) under new directory at jjnl/3rd-party/beepcore/x.y.z/ and add it to source control.
    # Command run from beepcore-java root with jjnl as a peer directory
        bc_ver=$(cat build/version.txt)
        mkdir -p ../jjnl/3rd-party/beepcore-java/${bc_ver}
        cp build/beepcore-${bc_ver}.tgz ../jjnl/3rd-party/beepcore-java/${bc_ver}/

    # Edit the jjnl build information to point to the new version of beepcore
    # Command run from beepcore-java root with jjnl as a peer directory
        vi ../jjnl/jnl_parent/pom.xml
           <beepcore.version>0.9.18</beepcore.version>

    # To install the jar files for use with maven directly from the beepcore build directory
        cd build/beepcore-${bc_ver}/lib
        ./install_jars.sh


Other Ant targets:
------------------ 
ant clean	# Clean the build artifacts.
ant [core]	# Build the core library (beepcore.jar).
ant sasl	# Build the sasl library (beepsasl.jar).
ant tls-jsse	# Build the tls library (tls-jsse.jar).
ant dist-tgz	# Build all (core, sasl, tls-jsse) and package as tgz file.
ant dist	# Build all (core, sasl, tls-jsse) and package as both zip and a tgz files.

Known Issues:
-------------

The TCL version and the Java version have an incompatibility.  The
temporary work around is to import the certifcate generated by
etc/makeCert (in the TCL library) into your Java certificate store
cacerts.  This is possible using keytool to import the server.pem file
from the TCL library.  See the keytool documentation for instructions
on how to import a certifcate.  The server.pem file is an X.509 format
certificate.

